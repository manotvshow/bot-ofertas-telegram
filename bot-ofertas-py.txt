import os
import requests
import time
from datetime import datetime
from flask import Flask, jsonify

# Configura√ß√µes (vari√°veis de ambiente no Render)
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_TOKEN')
TELEGRAM_CHANNEL_ID = os.environ.get('TELEGRAM_CHANNEL')
AMAZON_TAG = os.environ.get('AMAZON_TAG', 'seutag-20')

app = Flask(__name__)

class BotOfertas:
    def __init__(self):
        self.token = TELEGRAM_BOT_TOKEN
        self.channel_id = TELEGRAM_CHANNEL_ID
        
    def enviar_telegram(self, mensagem):
        """Envia mensagem para o canal do Telegram"""
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        data = {
            "chat_id": self.channel_id,
            "text": mensagem,
            "parse_mode": "HTML",
            "disable_web_page_preview": False
        }
        
        try:
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ Mensagem enviada com sucesso!")
                return True
            else:
                print(f"‚ùå Erro no Telegram: {response.text}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao enviar: {e}")
            return False

    def criar_mensagem_oferta(self, produto):
        """Cria a mensagem formatada da oferta"""
        return f"""
üî• <b>OFERTA VERIFICADA!</b>

üì¶ {produto['nome']}
üí∞ <s>R$ {produto['preco_original']}</s>
üíµ <b>R$ {produto['preco_promocional']}</b>
üéØ <b>{produto['desconto']}% OFF</b>

üîó <a href="{produto['link']}">COMPRAR AGORA</a>

‚ö° Por tempo limitado!
üì¢ @{self.channel_id.replace('@', '')}
        """

    def buscar_ofertas_exemplo(self):
        """
        OFERTAS DE EXEMPLO - depois voc√™ substitui por API real
        """
        return [
            {
                "nome": "Smartphone Samsung Galaxy A54 5G 128GB",
                "preco_original": "1.899,99",
                "preco_promocional": "1.299,99",
                "desconto": 32,
                "link": f"https://amzn.to/3X1yZ2a?tag={AMAZON_TAG}",
                "categoria": "Celulares"
            },
            {
                "nome": "Fone de Ouvido JBL Tune 510BT Sem Fio",
                "preco_original": "299,90",
                "preco_promocional": "179,90", 
                "desconto": 40,
                "link": f"https://amzn.to/3Z8W9bL?tag={AMAZON_TAG}",
                "categoria": "√Åudio"
            }
        ]

    def executar_verificacao(self):
        """Fun√ß√£o principal que ser√° chamada periodicamente"""
        print(f"üïí Iniciando verifica√ß√£o: {datetime.now()}")
        
        # Buscar ofertas
        ofertas = self.buscar_ofertas_exemplo()
        enviadas = 0
        
        # Enviar para o Telegram
        for produto in ofertas:
            if produto['desconto'] >= 30:  # Filtro m√≠nimo
                mensagem = self.criar_mensagem_oferta(produto)
                sucesso = self.enviar_telegram(mensagem)
                
                if sucesso:
                    enviadas += 1
                
                # Espera 3 segundos entre mensagens
                time.sleep(3)
        
        resultado = f"‚úÖ Verifica√ß√£o conclu√≠da! {enviadas} ofertas enviadas em {datetime.now()}"
        print(resultado)
        return resultado

# Criar inst√¢ncia do bot
bot = BotOfertas()

# Rotas do Flask
@app.route('/')
def home():
    return jsonify({
        "status": "Bot de Ofertas Online - Render + Uptime Robot + Cron-Job",
        "canal": TELEGRAM_CHANNEL_ID,
        "ultima_verificacao": datetime.now().isoformat(),
        "endpoints": {
            "health": "/health",
            "verificar_ofertas": "/verificar-ofertas",
            "teste": "/teste"
        }
    })

@app.route('/health')
def health():
    """Endpoint de sa√∫de para Uptime Robot"""
    return jsonify({
        "status": "healthy", 
        "time": datetime.now().isoformat(),
        "message": "Bot est√° funcionando perfeitamente!"
    })

@app.route('/verificar-ofertas')
def verificar_ofertas():
    """ENDPOINT que o Cron-Job vai acessar"""
    try:
        resultado = bot.executar_verificacao()
        return jsonify({
            "success": True,
            "resultado": resultado,
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route('/teste')
def teste():
    """Endpoint para testar manualmente"""
    try:
        # Teste simples - enviar 1 mensagem de teste
        mensagem_teste = """
üß™ <b>TESTE DO BOT</b>

‚úÖ Sistema funcionando perfeitamente!
üïí Hora: {datetime.now()}
üîß Render + Uptime Robot + Cron-Job

<i>Este √© apenas um teste</i>
        """
        bot.enviar_telegram(mensagem_teste)
        return jsonify({"status": "Teste enviado com sucesso!"})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Executar o Flask
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)